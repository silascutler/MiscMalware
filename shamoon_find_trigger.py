#!/usr/bin/env python
# Shamoon Trigger date finder
# By: Silas Cutler (silas.cutler@blacklistthisdomain.com)
# Test Hashes:
#   47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34
#   7f608f9783809d0165125a685e9b5537b9343f44b6d117b26be76b48b5c8f6d3
#   394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b

import sys

def generate_possible_years():
  """Generate list of encoded years from 2000 to 2040."""
  slist = []
  for year in range( 2000, 2040 ):
    for offset in range(-30, 0) + range(1,30) :
      tout = ""
      for byte in str(year):
        tout += chr( ord( byte) - offset )
      slist.append([year, tout, offset ])
  return slist

def decode(instr, shift):
  """Decode encoded string."""
  out = ""
  for byte in instr:
    if ord(byte) == 0:
      continue
    out += chr(ord(byte) + shift)
  return str(out).zfill(2)


slist = generate_possible_years()
indata = open(sys.argv[1], 'rb').read()

def main():
  for pyear in slist:
    if pyear[1] + "\x00"*8 in indata:
      for arch in [12, 16]:
        offset = indata.index(pyear[1])

        rMONTH = indata[offset + arch: offset + arch*2]
        rDAY = indata[offset + arch*2: offset + arch*3]
        rHOUR = indata[offset + arch*3: offset + arch*4]
        rMINUTE = indata[offset + arch*4: offset + arch*5]

        if (ord(rMONTH[0]) > 0 and ord(rMONTH[2]) == 0 and
          ord(rDAY[0]) > 0 and ord(rDAY[2]) == 0 and
          ord(rHOUR[0]) > 0 and ord(rHOUR[2]) == 0 and
          ord(rMINUTE[0]) > 0 and ord(rMINUTE[2]) == 0):

          print "Trigger Date: %s-%s-%s %s:%s (YYYY-MM-DD HH:MM)" % ( 
              pyear[0], 
              decode(rMONTH, pyear[2]), 
              decode(rDAY, pyear[2]), 
              decode(rHOUR, pyear[2]), 
              decode(rMINUTE, pyear[2]) )

if __name__ == "__main__":
  main()